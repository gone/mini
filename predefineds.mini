(define cond (operative cases env
                        (define cond-internal (operative a _ nil))
                        (cond-internal cases)))

(define function
  (operative outer-args outer-env
             (define inner-arg-names (car outer-args))
             (define function-body (cdr outer-args))

             (define initial-function-env (cons-dict-set nil :__parent__ outer-env))

             (wrap (operative inner-args inner-env
                              (evaluate-expressions function-body initial-function-env)))))

(define and (operative (left right) env
                       (if (evaluate left env)
                         (evaluate right env)
                         false)))

(define or (operative (left right) env
                      (if (evaluate left env)
                        true
                        (evaluate right env))))

(define quote (operative (quoted-expression) _ quoted-expression))

(define nil? (operative (expression) env
                        (= (evaluate expression env) nil)))

(define get-current-environment
        (wrap (operative () env env)))

(define cons-list
        (wrap (operative items _ items)))
