# feature tests: variables
(assert "Evaluating undefined variable throws exception"
        (throws? undefined-identifier "UndefinedIdentifierError"))

# `=` tests
(assert "`=` returns true for equal numbers" (= 0 0))
(assert "`=` returns false for non-equal numbers" (not (= 0 1)))
(assert "`=` returns true for equal strings" (= "Hello, world" "Hello, world"))
(assert "`=` returns false for non-equal strings" (not (= "Hello, world" "Goodnight, moon")))
(assert "`=` returns true for equal true values" (= true true))
(assert "`=` returns true for equal false values" (= false false))
(assert "`=` returns true for nils" (= nil nil))

# `assert` tests
(assert "`assert` executes without exception for true assertion" true)
(assert "`assert` returns nil for true assertion" (= (assert true) nil))
(assert "`assert` throws AssertionError for false assertion"
        (throws? (assert false) "AssertionError"))
(assert "`assert` throws TypeError for non-boolean assertion"
        (throws? (assert 1) "TypeError"))
(assert "`assert` can take multiple arguments" false true)

# `define` tests
(define previously-undefined-identifier true)
(assert "`define` adds identifier to environment" previously-undefined-identifier)

#`defined?` tests
(assert "`defined?` returns true for defined identifier" (defined? assert))
(assert "`defined?` returns false for undefined identifier"
        (not (defined? undefined-identifier)))

# `not` tests
(assert "`not` returns false for true" (= (not true) false))
(assert "`not` returns true for false" (= (not false) true))
(assert "`not` throws TypeError for non-boolean argument"
        (throws? (not 1) "TypeError"))

# `throws?` tests
(assert "`throws?` returns false when no exception is thrown"
        (not (throws? (assert true) "AssertionError")))
(assert "`throws?` returns true when the correct exception is thrown"
        (throws? (assert false) "AssertionError"))
(assert "`throws?` returns false when the wrong exception is thrown"
        (not (throws? (assert false) "TypeError")))
